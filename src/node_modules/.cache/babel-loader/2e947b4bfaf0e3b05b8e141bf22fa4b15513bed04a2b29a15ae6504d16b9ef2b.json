{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [gridSize, setGridSize] = useState(15); // Default grid size\n  const [wavePosition, setWavePosition] = useState(0);\n  const [waveSpeed, setWaveSpeed] = useState(1); // Adjust wave speed as needed\n  const [colorChanges, setColorChanges] = useState(10); // Adjust color changes per second as needed\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setWavePosition(prevPosition => (prevPosition + waveSpeed) % gridSize);\n    }, 1000 / colorChanges); // Update wave position periodically\n\n    return () => clearInterval(intervalId);\n  }, [gridSize, waveSpeed, colorChanges]);\n  const createGrid = () => {\n    const grid = [];\n    for (let i = 0; i < gridSize; i++) {\n      const row = [];\n      for (let j = 0; j < gridSize; j++) {\n        row.push({\n          color: 'white'\n        }); // Default color\n      }\n      grid.push(row);\n    }\n    return grid;\n  };\n  const calculateColors = () => {\n    const newGrid = createGrid(); // Create a new grid to avoid modifying the state directly\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        const distanceFromWave = Math.abs(j - wavePosition);\n        if (distanceFromWave <= 2) {\n          // Adjust the wave width as needed\n          const colorIntensity = 1 - distanceFromWave / 2;\n          newGrid[i][j].color = `rgba(255, 0, 255, ${colorIntensity})`; // Example color\n        }\n      }\n    }\n    return newGrid;\n  };\n  const gridData = calculateColors();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((square, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-square\",\n        style: {\n          backgroundColor: square.color\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"qLK5F/XXppX+Ly0XnQgAHZp4hC4=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","_s","gridSize","setGridSize","wavePosition","setWavePosition","waveSpeed","setWaveSpeed","colorChanges","setColorChanges","intervalId","setInterval","prevPosition","clearInterval","createGrid","grid","i","row","j","push","color","calculateColors","newGrid","distanceFromWave","Math","abs","colorIntensity","gridData","className","children","map","rowIndex","square","colIndex","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Grid.css';\r\n\r\nconst Grid = () => {\r\n  const [gridSize, setGridSize] = useState(15); // Default grid size\r\n  const [wavePosition, setWavePosition] = useState(0);\r\n  const [waveSpeed, setWaveSpeed] = useState(1); // Adjust wave speed as needed\r\n  const [colorChanges, setColorChanges] = useState(10); // Adjust color changes per second as needed\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setWavePosition((prevPosition) => (prevPosition + waveSpeed) % gridSize);\r\n    }, 1000 / colorChanges); // Update wave position periodically\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [gridSize, waveSpeed, colorChanges]);\r\n\r\n  const createGrid = () => {\r\n    const grid = [];\r\n    for (let i = 0; i < gridSize; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < gridSize; j++) {\r\n        row.push({ color: 'white' }); // Default color\r\n      }\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  const calculateColors = () => {\r\n    const newGrid = createGrid(); // Create a new grid to avoid modifying the state directly\r\n    for (let i = 0; i < gridSize; i++) {\r\n      for (let j = 0; j < gridSize; j++) {\r\n        const distanceFromWave = Math.abs(j - wavePosition);\r\n        if (distanceFromWave <= 2) { // Adjust the wave width as needed\r\n          const colorIntensity = 1 - distanceFromWave / 2;\r\n          newGrid[i][j].color = `rgba(255, 0, 255, ${colorIntensity})`; // Example color\r\n        }\r\n      }\r\n    }\r\n    return newGrid;\r\n  };\r\n\r\n  const gridData = calculateColors();\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      {gridData.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"grid-row\">\r\n          {row.map((square, colIndex) => (\r\n            <div\r\n              key={colIndex}\r\n              className=\"grid-square\"\r\n              style={{ backgroundColor: square.color }}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
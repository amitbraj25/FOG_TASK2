{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  columns\n}) => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [colorPattern, setColorPattern] = useState([]);\n  useEffect(() => {\n    // Initialize grid and color patterns\n    const initializeGrid = () => {\n      const newGrid = Array.from({\n        length: rows\n      }, () => Array.from({\n        length: columns\n      }, () => \"black\"));\n      const newColorPattern = Array.from({\n        length: rows\n      }, () => Array.from({\n        length: columns\n      }, () => generateRandomColor()));\n      setGrid(newGrid);\n      setColorPattern(newColorPattern);\n    };\n    initializeGrid();\n  }, [rows, columns]);\n\n  // Function to generate random color\n  const generateRandomColor = () => {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  useEffect(() => {\n    const animateGrid = () => {\n      setGrid(prevGrid => prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n        // Calculate wave pattern\n        const wave = Math.sin((colIndex + Date.now() / 500) * 0.5) * Math.cos((rowIndex + Date.now() / 1000) * 0.5);\n        const intensity = Math.abs(wave);\n        const baseColor = colorPattern[rowIndex][colIndex];\n\n        // Extract RGB from the base color and adjust intensity\n        const [r, g, b] = baseColor.replace(\"rgb(\", \"\").replace(\")\", \"\").split(\", \").map(Number);\n        return `rgb(${Math.floor(r * intensity)}, ${Math.floor(g * intensity)}, ${Math.floor(b * intensity)})`;\n      })));\n    };\n    const interval = setInterval(animateGrid, 100); // Color change every 100ms\n    return () => clearInterval(interval);\n  }, [colorPattern]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      gridTemplateColumns: `repeat(${columns}, 1fr)`\n    },\n    children: grid.map((row, rowIndex) => row.map((color, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell\",\n      style: {\n        backgroundColor: color\n      }\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"NjxIJEDFPIxm1YltI2dsQdmuVJU=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","rows","columns","_s","grid","setGrid","colorPattern","setColorPattern","initializeGrid","newGrid","Array","from","length","newColorPattern","generateRandomColor","r","Math","floor","random","g","b","animateGrid","prevGrid","map","row","rowIndex","cell","colIndex","wave","sin","Date","now","cos","intensity","abs","baseColor","replace","split","Number","interval","setInterval","clearInterval","className","style","gridTemplateColumns","children","color","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = ({ rows, columns }) => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [colorPattern, setColorPattern] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize grid and color patterns\r\n    const initializeGrid = () => {\r\n      const newGrid = Array.from({ length: rows }, () =>\r\n        Array.from({ length: columns }, () => \"black\")\r\n      );\r\n\r\n      const newColorPattern = Array.from({ length: rows }, () =>\r\n        Array.from({ length: columns }, () => generateRandomColor())\r\n      );\r\n\r\n      setGrid(newGrid);\r\n      setColorPattern(newColorPattern);\r\n    };\r\n\r\n    initializeGrid();\r\n  }, [rows, columns]);\r\n\r\n  // Function to generate random color\r\n  const generateRandomColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const animateGrid = () => {\r\n      setGrid((prevGrid) =>\r\n        prevGrid.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => {\r\n            // Calculate wave pattern\r\n            const wave =\r\n              Math.sin((colIndex + Date.now() / 500) * 0.5) *\r\n              Math.cos((rowIndex + Date.now() / 1000) * 0.5);\r\n\r\n            const intensity = Math.abs(wave);\r\n            const baseColor = colorPattern[rowIndex][colIndex];\r\n\r\n            // Extract RGB from the base color and adjust intensity\r\n            const [r, g, b] = baseColor\r\n              .replace(\"rgb(\", \"\")\r\n              .replace(\")\", \"\")\r\n              .split(\", \")\r\n              .map(Number);\r\n\r\n            return `rgb(${Math.floor(r * intensity)}, ${Math.floor(\r\n              g * intensity\r\n            )}, ${Math.floor(b * intensity)})`;\r\n          })\r\n        )\r\n      );\r\n    };\r\n\r\n    const interval = setInterval(animateGrid, 100); // Color change every 100ms\r\n    return () => clearInterval(interval);\r\n  }, [colorPattern]);\r\n\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={{\r\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\r\n      }}\r\n    >\r\n      {grid.map((row, rowIndex) =>\r\n        row.map((color, colIndex) => (\r\n          <div\r\n            key={`${rowIndex}-${colIndex}`}\r\n            className=\"cell\"\r\n            style={{ backgroundColor: color }}\r\n          ></div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
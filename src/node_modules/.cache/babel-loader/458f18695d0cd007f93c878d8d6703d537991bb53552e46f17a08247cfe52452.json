{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\n// src/Grid.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows = 15,\n  columns = 20\n}) => {\n  _s();\n  const [grid, setGrid] = useState(Array.from({\n    length: rows\n  }, () => Array(columns).fill(\"#000\")));\n  const updateWave = () => {\n    const newGrid = Array.from({\n      length: rows\n    }, (_, row) => Array.from({\n      length: columns\n    }, (_, col) => {\n      const waveEffect = Math.sin((row + col + Date.now() / 200) * 0.3);\n      const intensity = Math.floor(Math.abs(waveEffect) * 255); // 0-255 for RGB\n      return `rgb(${intensity}, 0, ${255 - intensity})`; // Purple-Blue gradient\n    }));\n    setGrid(newGrid);\n  };\n  useEffect(() => {\n    const interval = setInterval(updateWave, 100); // Update every 100ms\n    return () => clearInterval(interval); // Clean up on unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      gridTemplateColumns: `repeat(${columns}, 30px)`,\n      gridTemplateRows: `repeat(${rows}, 30px)`\n    },\n    children: grid.flat().map((color, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: color\n      }\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"acFsKeIANsYf2uUYsFVYYqhzbH0=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","rows","columns","_s","grid","setGrid","Array","from","length","fill","updateWave","newGrid","_","row","col","waveEffect","Math","sin","Date","now","intensity","floor","abs","interval","setInterval","clearInterval","className","style","gridTemplateColumns","gridTemplateRows","children","flat","map","color","idx","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":[" // src/Grid.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = ({ rows = 15, columns = 20 }) => {\r\n  const [grid, setGrid] = useState(\r\n    Array.from({ length: rows }, () => Array(columns).fill(\"#000\"))\r\n  );\r\n\r\n  const updateWave = () => {\r\n    const newGrid = Array.from({ length: rows }, (_, row) =>\r\n      Array.from({ length: columns }, (_, col) => {\r\n        const waveEffect = Math.sin((row + col + Date.now() / 200) * 0.3);\r\n        const intensity = Math.floor(Math.abs(waveEffect) * 255); // 0-255 for RGB\r\n        return `rgb(${intensity}, 0, ${255 - intensity})`; // Purple-Blue gradient\r\n      })\r\n    );\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(updateWave, 100); // Update every 100ms\r\n    return () => clearInterval(interval); // Clean up on unmount\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={{\r\n        gridTemplateColumns: `repeat(${columns}, 30px)`,\r\n        gridTemplateRows: `repeat(${rows}, 30px)`,\r\n      }}\r\n    >\r\n      {grid.flat().map((color, idx) => (\r\n        <div\r\n          key={idx}\r\n          className=\"square\"\r\n          style={{\r\n            backgroundColor: color,\r\n          }}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n"],"mappings":";;AAAC;AACD,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI,GAAG,EAAE;EAAEC,OAAO,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAC9BU,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEP;EAAK,CAAC,EAAE,MAAMK,KAAK,CAACJ,OAAO,CAAC,CAACO,IAAI,CAAC,MAAM,CAAC,CAChE,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,OAAO,GAAGL,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEP;IAAK,CAAC,EAAE,CAACW,CAAC,EAAEC,GAAG,KAClDP,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEN;IAAQ,CAAC,EAAE,CAACU,CAAC,EAAEE,GAAG,KAAK;MAC1C,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACJ,GAAG,GAAGC,GAAG,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC;MACjE,MAAMC,SAAS,GAAGJ,IAAI,CAACK,KAAK,CAACL,IAAI,CAACM,GAAG,CAACP,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;MAC1D,OAAO,OAAOK,SAAS,QAAQ,GAAG,GAAGA,SAAS,GAAG,CAAC,CAAC;IACrD,CAAC,CACH,CAAC;IACDf,OAAO,CAACM,OAAO,CAAC;EAClB,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd,MAAM0B,QAAQ,GAAGC,WAAW,CAACd,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;IAC/C,OAAO,MAAMe,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACExB,OAAA;IACE2B,SAAS,EAAC,MAAM;IAChBC,KAAK,EAAE;MACLC,mBAAmB,EAAE,UAAU1B,OAAO,SAAS;MAC/C2B,gBAAgB,EAAE,UAAU5B,IAAI;IAClC,CAAE;IAAA6B,QAAA,EAED1B,IAAI,CAAC2B,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,kBAC1BnC,OAAA;MAEE2B,SAAS,EAAC,QAAQ;MAClBC,KAAK,EAAE;QACLQ,eAAe,EAAEF;MACnB;IAAE,GAJGC,GAAG;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKJ,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpC,EAAA,CAxCIH,IAAI;AAAAwC,EAAA,GAAJxC,IAAI;AA0CV,eAAeA,IAAI;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
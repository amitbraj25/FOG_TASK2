{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  columns,\n  running\n}) => {\n  _s();\n  // Create a 2D grid of squares\n  const initialGrid = Array.from({\n    length: rows\n  }, () => Array(columns).fill('gray'));\n  const [grid, setGrid] = useState(initialGrid);\n\n  // Function to update the grid with a wave pattern\n  const updateWave = () => {\n    const newGrid = [...grid];\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        const waveEffect = Math.sin((i + j + Date.now() / 100) * 0.1);\n        // Change colors dynamically based on waveEffect\n        newGrid[i][j] = waveEffect > 0 ? `rgb(${Math.abs(waveEffect) * 255}, 0, ${255 - Math.abs(waveEffect) * 255})` : 'gray';\n      }\n    }\n    setGrid(newGrid);\n  };\n  useEffect(() => {\n    if (!running) return; // Stop wave if not running\n    const interval = setInterval(updateWave, 100);\n    return () => clearInterval(interval);\n  }, [running, grid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${columns}, 30px)`\n    },\n    children: grid.map((row, i) => row.map((color, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: color\n      }\n    }, `${i}-${j}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"J0+gerf9jMWTEmgmtidfBxyaYVI=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","rows","columns","running","_s","initialGrid","Array","from","length","fill","grid","setGrid","updateWave","newGrid","i","j","waveEffect","Math","sin","Date","now","abs","interval","setInterval","clearInterval","className","style","display","gridTemplateColumns","children","map","row","color","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nconst Grid = ({ rows, columns, running }) => {\r\n  // Create a 2D grid of squares\r\n  const initialGrid = Array.from({ length: rows }, () => Array(columns).fill('gray'));\r\n  const [grid, setGrid] = useState(initialGrid);\r\n\r\n  // Function to update the grid with a wave pattern\r\n  const updateWave = () => {\r\n    const newGrid = [...grid];\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        const waveEffect = Math.sin((i + j + Date.now() / 100) * 0.1);\r\n        // Change colors dynamically based on waveEffect\r\n        newGrid[i][j] = waveEffect > 0 \r\n          ? `rgb(${Math.abs(waveEffect) * 255}, 0, ${255 - Math.abs(waveEffect) * 255})`\r\n          : 'gray';\r\n      }\r\n    }\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!running) return; // Stop wave if not running\r\n    const interval = setInterval(updateWave, 100);\r\n    return () => clearInterval(interval);\r\n  }, [running, grid]);\r\n\r\n  return (\r\n    <div className=\"grid\" style={{ display: 'grid', gridTemplateColumns: `repeat(${columns}, 30px)` }}>\r\n      {grid.map((row, i) =>\r\n        row.map((color, j) => (\r\n          <div\r\n            key={`${i}-${j}`}\r\n            className=\"square\"\r\n            style={{ backgroundColor: color }}\r\n          ></div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC3C;EACA,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEP;EAAK,CAAC,EAAE,MAAMK,KAAK,CAACJ,OAAO,CAAC,CAACO,IAAI,CAAC,MAAM,CAAC,CAAC;EACnF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAACS,WAAW,CAAC;;EAE7C;EACA,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,OAAO,GAAG,CAAC,GAAGH,IAAI,CAAC;IACzB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,IAAI,EAAEa,CAAC,EAAE,EAAE;MAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,OAAO,EAAEa,CAAC,EAAE,EAAE;QAChC,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACJ,CAAC,GAAGC,CAAC,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC;QAC7D;QACAP,OAAO,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGC,UAAU,GAAG,CAAC,GAC1B,OAAOC,IAAI,CAACI,GAAG,CAACL,UAAU,CAAC,GAAG,GAAG,QAAQ,GAAG,GAAGC,IAAI,CAACI,GAAG,CAACL,UAAU,CAAC,GAAG,GAAG,GAAG,GAC5E,MAAM;MACZ;IACF;IACAL,OAAO,CAACE,OAAO,CAAC;EAClB,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,OAAO,EAAE,OAAO,CAAC;IACtB,MAAMmB,QAAQ,GAAGC,WAAW,CAACX,UAAU,EAAE,GAAG,CAAC;IAC7C,OAAO,MAAMY,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACnB,OAAO,EAAEO,IAAI,CAAC,CAAC;EAEnB,oBACEX,OAAA;IAAK0B,SAAS,EAAC,MAAM;IAACC,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,mBAAmB,EAAE,UAAU1B,OAAO;IAAU,CAAE;IAAA2B,QAAA,EAC/FnB,IAAI,CAACoB,GAAG,CAAC,CAACC,GAAG,EAAEjB,CAAC,KACfiB,GAAG,CAACD,GAAG,CAAC,CAACE,KAAK,EAAEjB,CAAC,kBACfhB,OAAA;MAEE0B,SAAS,EAAC,QAAQ;MAClBC,KAAK,EAAE;QAAEO,eAAe,EAAED;MAAM;IAAE,GAF7B,GAAGlB,CAAC,IAAIC,CAAC,EAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGZ,CACP,CACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjC,EAAA,CAvCIJ,IAAI;AAAAsC,EAAA,GAAJtC,IAAI;AAyCV,eAAeA,IAAI;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  columns\n}) => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    // Initialize grid with default colors\n    const createGrid = () => {\n      const newGrid = Array.from({\n        length: rows\n      }, () => Array.from({\n        length: columns\n      }, () => \"black\"));\n      setGrid(newGrid);\n    };\n    createGrid();\n  }, [rows, columns]);\n  useEffect(() => {\n    const animateGrid = () => {\n      setGrid(prevGrid => prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n        // Wave pattern calculation\n        const wave = Math.sin((colIndex + Date.now() / 500) * 0.5) * Math.cos((rowIndex + Date.now() / 1000) * 0.5);\n        const intensity = Math.abs(wave);\n        return `rgb(0, ${intensity * 255}, 0)`; // Green shades\n      })));\n    };\n    const interval = setInterval(animateGrid, 100); // Color change every 100ms\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      gridTemplateColumns: `repeat(${columns}, 1fr)`\n    },\n    children: grid.map((row, rowIndex) => row.map((color, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell\",\n      style: {\n        backgroundColor: color\n      }\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"zbu7BTKMpIyiP+kKBWvEegBctT4=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","rows","columns","_s","grid","setGrid","createGrid","newGrid","Array","from","length","animateGrid","prevGrid","map","row","rowIndex","cell","colIndex","wave","Math","sin","Date","now","cos","intensity","abs","interval","setInterval","clearInterval","className","style","gridTemplateColumns","children","color","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = ({ rows, columns }) => {\r\n  const [grid, setGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize grid with default colors\r\n    const createGrid = () => {\r\n      const newGrid = Array.from({ length: rows }, () =>\r\n        Array.from({ length: columns }, () => \"black\")\r\n      );\r\n      setGrid(newGrid);\r\n    };\r\n\r\n    createGrid();\r\n  }, [rows, columns]);\r\n\r\n  useEffect(() => {\r\n    const animateGrid = () => {\r\n      setGrid((prevGrid) =>\r\n        prevGrid.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => {\r\n            // Wave pattern calculation\r\n            const wave =\r\n              Math.sin((colIndex + Date.now() / 500) * 0.5) *\r\n              Math.cos((rowIndex + Date.now() / 1000) * 0.5);\r\n\r\n            const intensity = Math.abs(wave);\r\n            return `rgb(0, ${intensity * 255}, 0)`; // Green shades\r\n          })\r\n        )\r\n      );\r\n    };\r\n\r\n    const interval = setInterval(animateGrid, 100); // Color change every 100ms\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={{\r\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\r\n      }}\r\n    >\r\n      {grid.map((row, rowIndex) =>\r\n        row.map((color, colIndex) => (\r\n          <div\r\n            key={`${rowIndex}-${colIndex}`}\r\n            className=\"cell\"\r\n            style={{ backgroundColor: color }}\r\n          ></div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,UAAU,GAAGA,CAAA,KAAM;MACvB,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAET;MAAK,CAAC,EAAE,MAC3CO,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAER;MAAQ,CAAC,EAAE,MAAM,OAAO,CAC/C,CAAC;MACDG,OAAO,CAACE,OAAO,CAAC;IAClB,CAAC;IAEDD,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACL,IAAI,EAAEC,OAAO,CAAC,CAAC;EAEnBL,SAAS,CAAC,MAAM;IACd,MAAMc,WAAW,GAAGA,CAAA,KAAM;MACxBN,OAAO,CAAEO,QAAQ,IACfA,QAAQ,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,KACzBD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,KAAK;QAC1B;QACA,MAAMC,IAAI,GACRC,IAAI,CAACC,GAAG,CAAC,CAACH,QAAQ,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,GAC7CH,IAAI,CAACI,GAAG,CAAC,CAACR,QAAQ,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC;QAEhD,MAAME,SAAS,GAAGL,IAAI,CAACM,GAAG,CAACP,IAAI,CAAC;QAChC,OAAO,UAAUM,SAAS,GAAG,GAAG,MAAM,CAAC,CAAC;MAC1C,CAAC,CACH,CACF,CAAC;IACH,CAAC;IAED,MAAME,QAAQ,GAAGC,WAAW,CAAChB,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;IAChD,OAAO,MAAMiB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3B,OAAA;IACE8B,SAAS,EAAC,MAAM;IAChBC,KAAK,EAAE;MACLC,mBAAmB,EAAE,UAAU7B,OAAO;IACxC,CAAE;IAAA8B,QAAA,EAED5B,IAAI,CAACS,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,KACtBD,GAAG,CAACD,GAAG,CAAC,CAACoB,KAAK,EAAEhB,QAAQ,kBACtBlB,OAAA;MAEE8B,SAAS,EAAC,MAAM;MAChBC,KAAK,EAAE;QAAEI,eAAe,EAAED;MAAM;IAAE,GAF7B,GAAGlB,QAAQ,IAAIE,QAAQ,EAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAG1B,CACP,CACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnC,EAAA,CAtDIH,IAAI;AAAAuC,EAAA,GAAJvC,IAAI;AAwDV,eAAeA,IAAI;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
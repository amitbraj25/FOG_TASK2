{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  columns\n}) => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [activeColumns, setActiveColumns] = useState([0]); // Tracks active moving columns\n\n  useEffect(() => {\n    // Initialize grid\n    const createGrid = () => {\n      const newGrid = Array.from({\n        length: rows\n      }, (_, rowIndex) => Array.from({\n        length: columns\n      }, (_, colIndex) => ({\n        row: rowIndex,\n        col: colIndex,\n        color: 'gray'\n      })));\n      setGrid(newGrid);\n    };\n    createGrid();\n  }, [rows, columns]);\n  useEffect(() => {\n    // Update the grid with moving lines\n    const interval = setInterval(() => {\n      setGrid(prevGrid => prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n        // Check if this column is active\n        if (activeColumns.includes(colIndex)) {\n          // Assign a dynamic color\n          const color = `hsl(${Math.random() * 360}, 70%, 50%)`;\n          return {\n            ...cell,\n            color\n          };\n        }\n        return {\n          ...cell,\n          color: 'gray'\n        }; // Default color\n      })));\n\n      // Move columns left\n      setActiveColumns(prevColumns => prevColumns.map(col => (col - 1 + columns) % columns));\n    }, 300);\n    return () => clearInterval(interval);\n  }, [columns, activeColumns]);\n  useEffect(() => {\n    // Initialize multiple moving columns\n    const startColumns = [columns - 1, columns - 3, columns - 5]; // Starting positions\n    setActiveColumns(startColumns);\n  }, [columns]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${columns}, 30px)`,\n      gap: '2px'\n    },\n    children: grid.map(row => row.map(cell => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '30px',\n        height: '30px',\n        backgroundColor: cell.color,\n        transition: 'background-color 0.3s'\n      }\n    }, `${cell.row}-${cell.col}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"iDPYFXaVjQBqwEG6Qx57vUJMgns=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","rows","columns","_s","grid","setGrid","activeColumns","setActiveColumns","createGrid","newGrid","Array","from","length","_","rowIndex","colIndex","row","col","color","interval","setInterval","prevGrid","map","cell","includes","Math","random","prevColumns","clearInterval","startColumns","className","style","display","gridTemplateColumns","gap","children","width","height","backgroundColor","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Grid.css';\r\n\r\nconst Grid = ({ rows, columns }) => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [activeColumns, setActiveColumns] = useState([0]); // Tracks active moving columns\r\n\r\n  useEffect(() => {\r\n    // Initialize grid\r\n    const createGrid = () => {\r\n      const newGrid = Array.from({ length: rows }, (_, rowIndex) =>\r\n        Array.from({ length: columns }, (_, colIndex) => ({\r\n          row: rowIndex,\r\n          col: colIndex,\r\n          color: 'gray',\r\n        }))\r\n      );\r\n      setGrid(newGrid);\r\n    };\r\n    createGrid();\r\n  }, [rows, columns]);\r\n\r\n  useEffect(() => {\r\n    // Update the grid with moving lines\r\n    const interval = setInterval(() => {\r\n      setGrid((prevGrid) =>\r\n        prevGrid.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => {\r\n            // Check if this column is active\r\n            if (activeColumns.includes(colIndex)) {\r\n              // Assign a dynamic color\r\n              const color = `hsl(${Math.random() * 360}, 70%, 50%)`;\r\n              return { ...cell, color };\r\n            }\r\n            return { ...cell, color: 'gray' }; // Default color\r\n          })\r\n        )\r\n      );\r\n\r\n      // Move columns left\r\n      setActiveColumns((prevColumns) =>\r\n        prevColumns.map((col) => (col - 1 + columns) % columns)\r\n      );\r\n    }, 300);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [columns, activeColumns]);\r\n\r\n  useEffect(() => {\r\n    // Initialize multiple moving columns\r\n    const startColumns = [columns - 1, columns - 3, columns - 5]; // Starting positions\r\n    setActiveColumns(startColumns);\r\n  }, [columns]);\r\n\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${columns}, 30px)`,\r\n        gap: '2px',\r\n      }}\r\n    >\r\n      {grid.map((row) =>\r\n        row.map((cell) => (\r\n          <div\r\n            key={`${cell.row}-${cell.col}`}\r\n            style={{\r\n              width: '30px',\r\n              height: '30px',\r\n              backgroundColor: cell.color,\r\n              transition: 'background-color 0.3s',\r\n            }}\r\n          ></div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
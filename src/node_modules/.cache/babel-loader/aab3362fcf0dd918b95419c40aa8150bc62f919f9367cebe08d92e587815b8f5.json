{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  columns\n}) => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [lineIndex, setLineIndex] = useState(columns - 1); // Start from the right-most column\n  const [currentColor, setCurrentColor] = useState(\"rgb(0, 128, 255)\"); // Initial color\n  const [speed, setSpeed] = useState(200); // Default speed for wave\n  const [direction, setDirection] = useState(\"left\"); // Default direction (right to left)\n\n  // Generate the grid\n  useEffect(() => {\n    const createGrid = () => {\n      const newGrid = Array.from({\n        length: rows\n      }, (_, rowIndex) => Array.from({\n        length: columns\n      }, (_, colIndex) => ({\n        row: rowIndex,\n        col: colIndex,\n        color: \"black\" // Default black background\n      })));\n      setGrid(newGrid);\n    };\n    createGrid();\n  }, [rows, columns]);\n\n  // Animate the wave effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n        // Animate three columns at once\n        if (cell.col >= lineIndex - 2 && cell.col <= lineIndex) {\n          return {\n            ...cell,\n            color: currentColor\n          };\n        } else {\n          return {\n            ...cell,\n            color: \"black\"\n          };\n        }\n      })));\n\n      // Update the column index for the wave effect\n      setLineIndex(prevIndex => {\n        if (direction === \"left\") {\n          // Move left to right\n          if (prevIndex < columns - 1) {\n            return prevIndex + 1;\n          } else {\n            // Reset to the first column and change the color\n            setCurrentColor(generateRandomColor());\n            return 0;\n          }\n        } else {\n          // Move right to left\n          if (prevIndex > 0) {\n            return prevIndex - 1;\n          } else {\n            // Reset to the right-most column and change the color\n            setCurrentColor(generateRandomColor());\n            return columns - 1;\n          }\n        }\n      });\n    }, speed); // Adjust speed based on the user input\n\n    return () => clearInterval(interval); // Cleanup interval\n  }, [lineIndex, columns, currentColor, direction, speed]);\n\n  // Function to generate a random color\n  const generateRandomColor = () => {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${columns}, 30px)`,\n        gap: \"2px\"\n      },\n      children: grid.map(row => row.map(cell => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"30px\",\n          height: \"30px\",\n          backgroundColor: cell.color,\n          border: \"1px solid white\" // Add border for box-like effect\n        }\n      }, `${cell.row}-${cell.col}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Speed (ms): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"50\",\n          max: \"500\",\n          value: speed,\n          onChange: e => setSpeed(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Direction: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDirection(direction === \"left\" ? \"right\" : \"left\"),\n          children: direction === \"left\" ? \"Move Right to Left\" : \"Move Left to Right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"UtQl20X1OAr3KgrLjfoqiE7e4WY=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","rows","columns","_s","grid","setGrid","lineIndex","setLineIndex","currentColor","setCurrentColor","speed","setSpeed","direction","setDirection","createGrid","newGrid","Array","from","length","_","rowIndex","colIndex","row","col","color","interval","setInterval","prevGrid","map","cell","prevIndex","generateRandomColor","clearInterval","r","Math","floor","random","g","b","children","className","style","display","gridTemplateColumns","gap","width","height","backgroundColor","border","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","value","onChange","e","Number","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = ({ rows, columns }) => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [lineIndex, setLineIndex] = useState(columns - 1); // Start from the right-most column\r\n  const [currentColor, setCurrentColor] = useState(\"rgb(0, 128, 255)\"); // Initial color\r\n  const [speed, setSpeed] = useState(200); // Default speed for wave\r\n  const [direction, setDirection] = useState(\"left\"); // Default direction (right to left)\r\n\r\n  // Generate the grid\r\n  useEffect(() => {\r\n    const createGrid = () => {\r\n      const newGrid = Array.from({ length: rows }, (_, rowIndex) =>\r\n        Array.from({ length: columns }, (_, colIndex) => ({\r\n          row: rowIndex,\r\n          col: colIndex,\r\n          color: \"black\", // Default black background\r\n        }))\r\n      );\r\n      setGrid(newGrid);\r\n    };\r\n    createGrid();\r\n  }, [rows, columns]);\r\n\r\n  // Animate the wave effect\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setGrid((prevGrid) =>\r\n        prevGrid.map((row) =>\r\n          row.map((cell) => {\r\n            // Animate three columns at once\r\n            if (\r\n              cell.col >= lineIndex - 2 &&\r\n              cell.col <= lineIndex\r\n            ) {\r\n              return { ...cell, color: currentColor };\r\n            } else {\r\n              return { ...cell, color: \"black\" };\r\n            }\r\n          })\r\n        )\r\n      );\r\n\r\n      // Update the column index for the wave effect\r\n      setLineIndex((prevIndex) => {\r\n        if (direction === \"left\") {\r\n          // Move left to right\r\n          if (prevIndex < columns - 1) {\r\n            return prevIndex + 1;\r\n          } else {\r\n            // Reset to the first column and change the color\r\n            setCurrentColor(generateRandomColor());\r\n            return 0;\r\n          }\r\n        } else {\r\n          // Move right to left\r\n          if (prevIndex > 0) {\r\n            return prevIndex - 1;\r\n          } else {\r\n            // Reset to the right-most column and change the color\r\n            setCurrentColor(generateRandomColor());\r\n            return columns - 1;\r\n          }\r\n        }\r\n      });\r\n    }, speed); // Adjust speed based on the user input\r\n\r\n    return () => clearInterval(interval); // Cleanup interval\r\n  }, [lineIndex, columns, currentColor, direction, speed]);\r\n\r\n  // Function to generate a random color\r\n  const generateRandomColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"grid\"\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${columns}, 30px)`,\r\n          gap: \"2px\",\r\n        }}\r\n      >\r\n        {grid.map((row) =>\r\n          row.map((cell) => (\r\n            <div\r\n              key={`${cell.row}-${cell.col}`}\r\n              style={{\r\n                width: \"30px\",\r\n                height: \"30px\",\r\n                backgroundColor: cell.color,\r\n                border: \"1px solid white\", // Add border for box-like effect\r\n              }}\r\n            ></div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"controls\">\r\n        <div>\r\n          <label>Speed (ms): </label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"50\"\r\n            max=\"500\"\r\n            value={speed}\r\n            onChange={(e) => setSpeed(Number(e.target.value))}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Direction: </label>\r\n          <button onClick={() => setDirection(direction === \"left\" ? \"right\" : \"left\")}>\r\n            {direction === \"left\" ? \"Move Right to Left\" : \"Move Left to Right\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
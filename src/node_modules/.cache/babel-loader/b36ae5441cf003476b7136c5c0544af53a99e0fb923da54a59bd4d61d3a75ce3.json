{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\wave-grid\\\\src\\\\Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  columns\n}) => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [lineIndex, setLineIndex] = useState(columns - 1); // Start from the right-most column\n  const [currentColor, setCurrentColor] = useState(\"rgb(0, 128, 255)\"); // Initial color\n\n  // Generate the grid\n  useEffect(() => {\n    const createGrid = () => {\n      const newGrid = Array.from({\n        length: rows\n      }, (_, rowIndex) => Array.from({\n        length: columns\n      }, (_, colIndex) => ({\n        row: rowIndex,\n        col: colIndex,\n        color: \"black\" // Default black background\n      })));\n      setGrid(newGrid);\n    };\n    createGrid();\n  }, [rows, columns]);\n\n  // Animate the wave effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n        // Animate three columns at once\n        if (cell.col >= lineIndex - 2 && cell.col <= lineIndex) {\n          return {\n            ...cell,\n            color: currentColor\n          };\n        } else {\n          return {\n            ...cell,\n            color: \"black\"\n          };\n        }\n      })));\n\n      // Update the column index for the wave effect\n      setLineIndex(prevIndex => {\n        if (prevIndex > 0) {\n          return prevIndex - 1; // Move left\n        } else {\n          // Reset to the right-most column and change the color\n          setCurrentColor(generateRandomColor());\n          return columns - 1;\n        }\n      });\n    }, 200); // Adjust speed of movement here\n\n    return () => clearInterval(interval); // Cleanup interval\n  }, [lineIndex, columns, currentColor]);\n\n  // Function to generate a random color\n  const generateRandomColor = () => {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${columns}, 30px)`,\n      gap: \"2px\"\n    },\n    children: grid.map(row => row.map(cell => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"30px\",\n        height: \"30px\",\n        backgroundColor: cell.color,\n        border: \"1px solid white\" // Add border for box-like effect\n      }\n    }, `${cell.row}-${cell.col}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"YdaXUnHgwPKJ1CrRnXqrmoRI9VY=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","rows","columns","_s","grid","setGrid","lineIndex","setLineIndex","currentColor","setCurrentColor","createGrid","newGrid","Array","from","length","_","rowIndex","colIndex","row","col","color","interval","setInterval","prevGrid","map","cell","prevIndex","generateRandomColor","clearInterval","r","Math","floor","random","g","b","className","style","display","gridTemplateColumns","gap","children","width","height","backgroundColor","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/wave-grid/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = ({ rows, columns }) => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [lineIndex, setLineIndex] = useState(columns - 1); // Start from the right-most column\r\n  const [currentColor, setCurrentColor] = useState(\"rgb(0, 128, 255)\"); // Initial color\r\n\r\n  // Generate the grid\r\n  useEffect(() => {\r\n    const createGrid = () => {\r\n      const newGrid = Array.from({ length: rows }, (_, rowIndex) =>\r\n        Array.from({ length: columns }, (_, colIndex) => ({\r\n          row: rowIndex,\r\n          col: colIndex,\r\n          color: \"black\", // Default black background\r\n        }))\r\n      );\r\n      setGrid(newGrid);\r\n    };\r\n    createGrid();\r\n  }, [rows, columns]);\r\n\r\n  // Animate the wave effect\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setGrid((prevGrid) =>\r\n        prevGrid.map((row) =>\r\n          row.map((cell) => {\r\n            // Animate three columns at once\r\n            if (\r\n              cell.col >= lineIndex - 2 &&\r\n              cell.col <= lineIndex\r\n            ) {\r\n              return { ...cell, color: currentColor };\r\n            } else {\r\n              return { ...cell, color: \"black\" };\r\n            }\r\n          })\r\n        )\r\n      );\r\n\r\n      // Update the column index for the wave effect\r\n      setLineIndex((prevIndex) => {\r\n        if (prevIndex > 0) {\r\n          return prevIndex - 1; // Move left\r\n        } else {\r\n          // Reset to the right-most column and change the color\r\n          setCurrentColor(generateRandomColor());\r\n          return columns - 1;\r\n        }\r\n      });\r\n    }, 200); // Adjust speed of movement here\r\n\r\n    return () => clearInterval(interval); // Cleanup interval\r\n  }, [lineIndex, columns, currentColor]);\r\n\r\n  // Function to generate a random color\r\n  const generateRandomColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${columns}, 30px)`,\r\n        gap: \"2px\",\r\n      }}\r\n    >\r\n      {grid.map((row) =>\r\n        row.map((cell) => (\r\n          <div\r\n            key={`${cell.row}-${cell.col}`}\r\n            style={{\r\n              width: \"30px\",\r\n              height: \"30px\",\r\n              backgroundColor: cell.color,\r\n              border: \"1px solid white\", // Add border for box-like effect\r\n            }}\r\n          ></div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}